import { $ } from "bun"
import { access, mkdir } from "node:fs/promises"
import { dirname } from "node:path"
import { constants } from "node:fs"
import ora from "ora"

const TYPES_DESTINATION = ".$COMPONENTS_DIR/types.ts"
const COMPONENTS_JSON_FILE = "components.$SPACE_ID.json"

const spinner = ora()

console.log("ü™Ñ Generating types from Storyblok components...\n")

try {
  // Check if components file exists
  let existing_components = ""

  try {
    await access(COMPONENTS_JSON_FILE, constants.F_OK)
    existing_components = await Bun.file(COMPONENTS_JSON_FILE).text()
  } catch {
    console.info(`No existing components file found.`)
  }

  // Log in to Storyblok and pull components
  spinner.start("Preparing to pull components...")
  await $`chmod u+w ${TYPES_DESTINATION}`.quiet().nothrow()
  await $`bunx storyblok pull-components --space=$SPACE_ID`.quiet()
  spinner.succeed("Components pulled successfully.")

  // Read the new components file
  const new_components = await Bun.file(COMPONENTS_JSON_FILE).text()

  // Compare existing and new components
  if (existing_components === new_components && Bun.file(TYPES_DESTINATION).size > 0) {
    console.log("‚ú® No changes detected in components. Skipping type generation.")
    process.exit(0)
  }

  // Generate types
  spinner.start("Generating TypeScript definitions...")

  await mkdir(dirname(TYPES_DESTINATION), { recursive: true })
  await $`bunx storyblok-generate-ts source=${COMPONENTS_JSON_FILE} target=${TYPES_DESTINATION} compilerOptions.additionalProperties=false compilerOptions.unknownAny=true compilerOptions.format=false`.quiet()

  spinner.succeed("TypeScript definitions generated.")

  // Read the generated file
  const generated_content = await Bun.file(TYPES_DESTINATION).text()

  const header =
    `
  /**
   * AUTO-GENERATED FILE. DO NOT EDIT.
   * Generated by the generate script on ${new Date().toISOString()}.
   * Any changes will be overwritten.
   */

  import type { SbBlokData } from "@storyblok/svelte"

  export type Blok<T> = SbBlokData & T
  `.trim() + "\n\n"

  // Write the final file
  spinner.start("Finalising schema file...")
  Bun.write(TYPES_DESTINATION, header + generated_content)
  spinner.succeed(`Schema written to ${TYPES_DESTINATION}.`)

  // Format
  spinner.start("Formatting file...")
  await $`prettier --write ${TYPES_DESTINATION}`.quiet()
  spinner.succeed("File formatted.")

  // Lock the file
  await $`chmod a-w ${TYPES_DESTINATION}`.quiet()
  console.log(
    `\nüéâ Storyblok component types generated successfully to \x1b[35m${TYPES_DESTINATION}\x1b[0m`
  )
} catch (err) {
  spinner.fail("An error occurred.")
  console.error("‚ùå", err)
  process.exit(1)
}
