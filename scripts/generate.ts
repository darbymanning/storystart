import { $ } from "bun"
import { writeFile, readFile, access } from "node:fs/promises"
import { constants } from "node:fs"
import ora from "ora"

const space_id = process.env.STORYBLOK_SPACE_ID
const access_token = process.env.STORYBLOK_PERSONAL_ACCESS_TOKEN
const destination = "src/lib/schema.ts"
const components_file = `components.${space_id}.json`

const spinner = ora()

console.log("ü™Ñ Generating types from Storyblok components...\n")

try {
	// Check if components file exists
	let existing_components = ""
	try {
		await access(components_file, constants.F_OK)
		existing_components = await readFile(components_file, "utf-8")
	} catch {
		console.log(`[info] no existing components file found.`)
	}

	// Log in to Storyblok and pull components
	spinner.start("Preparing to pull components...")
	await $`chmod u+w ${destination}`.quiet().nothrow()
	await $`bunx storyblok logout`.quiet().nothrow()
	await $`bunx storyblok login --token ${access_token} --region eu`.quiet()
	await $`bunx storyblok pull-components --space=${space_id}`.quiet()
	spinner.succeed("Components pulled successfully.")

	// Read the new components file
	const new_components = await readFile(components_file, "utf-8")

	// Compare existing and new components
	if (existing_components === new_components) {
		console.log("‚ú® No changes detected in components. Skipping type generation.")
		process.exit(0)
	}

	// Generate types
	spinner.start("Generating TypeScript definitions...")
	await $`bunx storyblok-generate-ts source=${components_file} target=${destination} compilerOptions.additionalProperties=false compilerOptions.unknownAny=true compilerOptions.format=false`.quiet()
	spinner.succeed("TypeScript definitions generated.")

	// Read the generated file
	const generated_content = await readFile(destination, "utf-8")

	const header =
		`
  /**
   * AUTO-GENERATED FILE. DO NOT EDIT.
   * Generated by the generate script on ${new Date().toISOString()}.
   * Any changes will be overwritten.
   */

  import type { SbBlokData } from "@storyblok/svelte"

  export type Blok<T> = SbBlokData & T
  `.trim() + "\n\n"

	// Write the final file
	spinner.start("Finalizing schema file...")
	await writeFile(destination, header + generated_content)
	spinner.succeed(`Schema written to ${destination}.`)

	// Format
	spinner.start("Formatting file...")
	await $`prettier --write ${destination}`.quiet()
	spinner.succeed("File formatted.")

	// Lock the file
	await $`chmod a-w ${destination}`.quiet()
	console.log(
		`\nüéâ Storyblok component types generated successfully to \x1b[35m${destination}\x1b[0m`
	)
} catch (err) {
	spinner.fail("An error occurred.")
	console.error("‚ùå", err)
	process.exit(1)
}
